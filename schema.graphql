schema @site(type: "kanban/test7") {
  query: Query
  mutation: Mutation
}

type Query {
  allWorkflows: [Workflow]
  workflow(id: ID!): Workflow
  allCards: [Card]
  cardHistory(id: ID!): [Card] @site(history: "desc")
  cardsByIds(ids: [ID]!): [Card]
  allWorkflowStates: [WorkflowState]
  workflowState(id: ID!): WorkflowState
  allProjects: [Project]
  commentsForCard(id: ID!): [Comment] @site(itemForId: "cardId")
  cardsForProject(id: ID!): [Card] @site(itemForId: "projectId")
}

type Mutation {
  createWorkflow(
    name: String!
    description: String
    workflowStateIds: [ID]
  ): Workflow
  updateWorkflow(
    id: ID!
    name: String
    description: String
    workflowStateIds: [ID]
  ): Workflow @site(mutation: "update")
  deleteWorkflow(id: ID!): Workflow @site(mutation: "delete")
  createWorkflowState(WorkflowState: WorkflowStateInput): WorkflowState
  createWorkflowStates(workflowStates: [WorkflowStateInput]): [WorkflowState]
  moveCard(id: ID!, workflowStateId: ID!): Card
    @site(resolver: "foo.bar.moveCard")
  updateWorkflowState(
    id: ID!
    name: String
    description: String
    cardIds: [ID]
  ): WorkflowState @site(mutation: "update")
  deleteWorkflowState(id: ID!): WorkflowState @site(mutation: "delete")
  createCard(Card: CardInput): Card
  updateCard(id: ID!, Card: CardInput): Card @site(mutation: "update")
  deleteCard(id: ID!): Card @site(mutation: "delete")
  createProject(Project: ProjectInput): Project
  updateProject(id: ID!, Project: ProjectInput): Project
    @site(mutation: "update")
  deleteProject(id: ID!): Project @site(mutation: "delete")
  createComment(Comment: CommentInput): Comment
  updateComment(id: ID!, Comment: CommentInput): Comment
    @site(mutation: "update")
  deleteComment(id: ID!): Comment @site(mutation: "delete")
}

input CommentInput {
  text: String!
  parentId: ID
  userId: ID!
  cardId: ID!
}

input ProjectInput {
  name: String!
  description: String
}

input WorkflowStateInput {
  id: ID
  name: String
  description: String
  cardIds: [ID]
}

input FileInput {
  name: String!
  type: String!
  lzbase64: String!
}

input CardInput {
  title: String
  description: String
  projectId: ID
  workflowId: ID
  files: [FileInput]
}

type Workflow {
  id: ID!
  name: String!
  description: String
  _siteQuery: String
  workflowStates: [WorkflowState]! @site(each: "workflowStateIds")
}

enum WorkflowStateType {
  UNSTARTED
  STARTED
  DONE
}

type WorkflowState {
  id: ID!
  name: String!
  description: String
  type: WorkflowStateType
  workflow: Workflow!
    @site(
      q: {
        edn: """
        {:find [e]
           :where [[e {{type}} "Workflow"]
                   [e :workflowStateIds id]
                   [(= id "{{object-id}}")]]}
        """
      }
    )
  cards: [Card] @site(each: "cardIds")
}

type Project {
  id: ID!
  name: String!
  description: String
}

type File {
  name: String!
  type: String!
  lzbase64: String!
}

type Card {
  id: ID!
  title: String!
  _siteValidTime: String
  _siteSubject: ID!
  project: Project @site(ref: "projectId")
  description: String
  files: [File]
  workflow: Workflow @site(ref: "workflowId")
}

type Comment {
  id: ID!
  text: String!
  userId: String
  parentId: String
  card: Card @site(ref: "cardId")
  children: [Comment] @site(ref: "parentId")
  _siteQuery: String
}
